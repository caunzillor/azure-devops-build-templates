# Repo: Contoso/BuildTemplates
# File: common.yml
parameters:
  vmImage: 'ubuntu 16.04'

jobs:
- job: Build
  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
  - bash: |
      cat > Dockerfile << EOF
      FROM microsoft/dotnet:2.2.100-sdk as build-env
      WORKDIR /build
      COPY . ./
      RUN dotnet restore ${{ parameters.serviceName }}.csproj
      RUN dotnet publish -c Release -o out ${{ parameters.serviceName }}.csproj
      FROM microsoft/dotnet:2.2.0-aspnetcore-runtime
      WORKDIR /app
      COPY --from=build-env /build/out ./
      EXPOSE 80
      ENTRYPOINT ["dotnet", "${{ parameters.serviceName}}.dll"]
      EOF
#  - script: cat Dockerfile
#  - script: docker build -f Dockerfile -t ${{ parameters.imageName }} .
  - task: Docker@1
    displayName: Build image
    inputs:
      command: build
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: docker-registry.grenzebach.edns.biz
      dockerFile: Dockerfile
      imageName: ${{ parameters.imageName }}
  - task: Docker@1
    displayName: Container registry login
    inputs:
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: docker-registry.grenzebach.edns.biz
      command: login
- job: Deploy
  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
  - bash: |
      cat > service.yaml << EOF
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ${{ parameters.imageName }}-deployment
        labels:
          app: ${{ parameters.imageName }}
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: ${{ parameters.imageName }}
        template:
          metadata:
            labels:
              app: ${{ parameters.imageName }}
          spec:
            containers:
            - name: ${{ parameters.imageName }}
              image: ${{ parameters.imageName }}
              ports:
              - containerPort: 80
      kind: Service
      apiVersion: v1
      metadata:
        name: ${{ parameters.imageName }}-service
      spec:
        selector:
          app: ${{ parameters.imageName }}
        type: NodePort
        ports:
        - protocol: TCP
          port: 80
          targetPort: 80
      EOF
  - task: Kubernetes@1
    displayName: kubectl apply
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: prod-kubernetes-slave-haproxy
      command: apply
      arguments: -f service.yaml
